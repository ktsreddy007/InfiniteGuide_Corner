# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main
stages:
# Stage 1: Check and Install Dependencies (if needed)
- stage: DotNetSetup
  displayName: 'Check and Install Dependencies for .NET on CentOS'
  jobs:
  - job: DependencyCheck
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
    steps:
    - script: |
        echo "Checking for .NET SDK..."
        if ! command -v dotnet &> /dev/null; then
          echo ".NET SDK not found. Installing..."
          echo "$sudo_user" | sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
          echo "$sudo_user" | sudo yum install -y dotnet-sdk-8.0
        else
          echo ".NET SDK already installed."
        fi
        echo "Verifying installation..."
        dotnet --info
      displayName: 'Ensure .NET SDK is Installed'
# Stage 2: Restore Dependencies
- stage: Restore
  displayName: 'Restore Dependencies'
  dependsOn: DotNetSetup
  jobs:
  - job: RestoreJob
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
    steps:
    - script: dotnet restore InfiniteGuide_Corner.sln
      displayName: 'Dotnet Restore'

# Stage 3: Build and Compile
- stage: Build
  displayName: 'Build and Compile'
  dependsOn: Restore
  jobs:
  - job: BuildJob
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
    steps:
    - script: |
        dotnet clean InfiniteGuide_Corner.sln
        dotnet build InfiniteGuide_Corner.sln --configuration Release
      displayName: 'Dotnet Clean and Build'     

# Stage 4: SonarQube Analysis
- stage: SonarQubeAnalysis
  displayName: 'SonarQube Analysis'
  dependsOn: Restore
  jobs:
  - job: SonarQubeJob
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
    steps:
      # Step 1: Prepare SonarQube Analysis Configuration
      - task: SonarQubePrepare@5
        inputs:
          SonarQube: 'sonarsc'  # Replace with your SonarQube service connection name
          scannerMode: 'MSBuild'
          projectKey: 'ktsreddy007_ktsreddy007'
          projectName: 'ktsreddy007'
          organization: 'ktsreddy007'  # Your SonarQube Cloud organization

      # Step 3: Publish the Quality Gate Result
      - task: SonarQubePublish@5
        inputs:
          pollingTimeoutSec: '300'  # Timeout to wait for analysis report

# Stage 5: Publish
- stage: Publish
  displayName: 'Publish Application'
  dependsOn: Build
  jobs:
  - job: PublishJob
    pool:
      name: Self-Hosted
      demands:
            - Agent.Name -equals localhost
      steps:
          - script: dotnet publish src/Infyguide_corner/Infyguide_corner.csproj -c Release -o $(pwd)/publish
            displayName: 'Dotnet Publish'     
