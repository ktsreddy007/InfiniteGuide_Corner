parameters:
  - name: dotnetSdkVersion
    type: string
    default: '8.0'
  - name: sonarQubeConnection
    type: string
    default: 'sonarsc'
  - name: sonarOrganization
    type: string
    default: 'ktsreddy007'
  - name: sonarProjectKey
    type: string
    default: 'ktsreddy007_ktsreddy007'
  - name: sonarProjectName
    type: string
    default: 'ktsreddy007'

trigger:
- main

stages:
  - stage: DotNetSetup
    displayName: 'Check and Install Dependencies for .NET on CentOS'
    jobs:
      - job: DependencyCheck
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - checkout: self
            fetchDepth: 0
          - script: |
              echo "Checking for .NET SDK..."
              if ! command -v dotnet &> /dev/null; then
                echo ".NET SDK not found. Installing..."
                sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
                sudo yum install -y dotnet-sdk-${{ parameters.dotnetSdkVersion }}
              else
                installed_version=$(dotnet --version)
                echo ".NET SDK is already installed (version: $installed_version)."
              fi
              echo "Verifying installation..."
              dotnet --info
            displayName: 'Ensure .NET SDK is Installed'

  - stage: Sonarcloudanalysis
    displayName: 'Sonarcloud Analysis'
    dependsOn: DotNetSetup
    jobs:
      - job: CodeAnalysisAndBuild
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
         - task: SonarCloudPrepare@3
           inputs:
             SonarCloud: ${{ parameters.sonarQubeConnection }}
             scannerMode: 'dotnet'
             dotnetScannerVersion: '10.1.2.114627'
             projectKey: ${{ parameters.sonarProjectKey }}
             projectName: ${{ parameters.sonarProjectName }}
             organization: ${{ parameters.sonarOrganization }}

         - script: |
             # Ensure we're in the correct directory where the solution is located
             cd $(Build.SourcesDirectory)
             dotnet build InfiniteGuide_Corner.sln --configuration Release
           displayName: 'Dotnet Build (for SonarCloud analysis)'
         - task: SonarCloudAnalyze@3
           displayName: 'Run SonarCloud Analysis'
         - task: SonarCloudPublish@3
           inputs:
             pollingTimeoutSec: '300'
           displayName: 'Publish SonarCloud Analysis Results'

  - stage: UploadPublishFolder
    displayName: 'Upload Entire Publish Folder to JFrog Artifactory'
    dependsOn: Publish
    jobs:
      - job: UploadPublishFolderJob
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - checkout: self
            fetchDepth: 0
          
          # Upload entire publish folder using JFrog CLI
          - script: |
              echo "Configuring JFrog CLI..."
              jfrog rt config --url https://trialgkzazx.jfrog.io/artifactory --service-connection jfrogservice --interactive=false
              echo "Uploading the entire publish folder..."
              jfrog rt u "$(Build.ArtifactStagingDirectory)/publish/*" "infiyguide/$(Build.BuildId)/" --recursive
            displayName: 'Upload Entire Publish Folder to Artifactory'