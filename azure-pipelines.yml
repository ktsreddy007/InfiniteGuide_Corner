# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

stages:
  # Stage 1: Check and Install Dependencies (if needed)
  - stage: DotNetSetup
    displayName: 'Check and Install Dependencies for .NET on CentOS'
    jobs:
      - job: DependencyCheck
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - checkout : Self-Hosted
            fetchDepth: 0 
          - script: |
              echo "Checking for .NET SDK..."
              if ! command -v dotnet &> /dev/null; then
                echo ".NET SDK not found. Installing..."
                echo "$sudo_user" | sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
                echo "$sudo_user" | sudo yum install -y dotnet-sdk-8.0
              else
                echo ".NET SDK already installed."
              fi
              echo "Verifying installation..."
              dotnet --info
            displayName: 'Ensure .NET SDK is Installed'

  # Stage 2: Restore Dependencies
  - stage: Restore
    displayName: 'Restore Dependencies'
    dependsOn: DotNetSetup
    jobs:
      - job: RestoreJob
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - script: dotnet restore InfiniteGuide_Corner.sln
            displayName: 'Dotnet Restore'

  # Stage 3: Build and Compile
  - stage: Build
    displayName: 'Build and Compile'
    dependsOn: Restore
    jobs:
      - job: BuildJob
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - script: |
              dotnet clean InfiniteGuide_Corner.sln
              dotnet build InfiniteGuide_Corner.sln --configuration Release
            displayName: 'Dotnet Clean and Build'

  # Stage 4: SonarCloud Analysis (Updated to SonarCloud tasks)
  - stage: SonarCloudAnalysis
    displayName: 'SonarCloud Analysis'
    dependsOn: Build
    jobs: 
      - job: SonarCloudJob
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          # Step 1: Prepare SonarCloud Analysis Configuration
          - task: SonarCloudPrepare@3
            inputs:
              SonarCloud: 'sonarsc'  # Reference your SonarQube Cloud service connection here
              scannerMode: 'dotnet'
              projectKey: 'ktsreddy007_ktsreddy007'
              projectName: 'ktsreddy007'
              organization: 'ktsreddy007'  # Your SonarQube Cloud organization
              extraProperties: |
                    sonar.branch.name=$(Build.SourceBranchName)

          # Step 2: Debugging Step - Check if the SonarCloud analysis preparation was successful
          - script: |
              echo "Verifying if SonarCloud preparation was successful..."
              ls -la $(Build.SourcesDirectory)
              echo "Current working directory: $(System.DefaultWorkingDirectory)"
            displayName: 'Verify SonarCloud Analysis Preparation'

          # Step 3: Publish the Quality Gate Result
          - task: SonarCloudPublish@3
            inputs:
              pollingTimeoutSec: '300'  # Timeout to wait for analysis report

  # Stage 5: Publish
  - stage: Publish
    displayName: 'Publish Application'
    dependsOn: Build
    jobs:
      - job: PublishJob
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - script: dotnet publish src/Infyguide_corner/Infyguide_corner.csproj -c Release -o $(pwd)/publish
            displayName: 'Dotnet Publish'