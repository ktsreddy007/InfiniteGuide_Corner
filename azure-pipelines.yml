parameters:
  - name: dotnetSdkVersion
    type: string
    default: '8.0'
  - name: sonarQubeConnection
    type: string
    default: 'sonarsc'
  - name: sonarOrganization
    type: string
    default: 'ktsreddy007'
  - name: sonarProjectKey
    type: string
    default: 'ktsreddy007_ktsreddy007'
  - name: sonarProjectName
    type: string
    default: 'ktsreddy007'
  - name: acrName
    type: string
    default: 'infiacr'  

trigger:
- main

stages:
  - stage: DotNetSetup
    displayName: 'Checks and Installs Dependencies for .NET on CentOS'
    jobs:
      - job: DependencyCheck
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - checkout: self
            fetchDepth: 0
          - script: |
              echo "Checking for .NET SDK..."
              if ! command -v dotnet &> /dev/null; then
                echo ".NET SDK not found. Installing..."
                sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
                sudo yum install -y dotnet-sdk-${{ parameters.dotnetSdkVersion }}
              else
                installed_version=$(dotnet --version)
                echo ".NET SDK is already installed (version: $installed_version)."
              fi
              echo "Verifying installation..."
              dotnet --info
            displayName: 'Ensure .NET SDK is Installed'

  - stage: Sonarcloudanalysis
    displayName: 'Sonarcloud Analysis'
    dependsOn: DotNetSetup
    jobs:
      - job: CodeAnalysisAndBuild
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
         - task: SonarCloudPrepare@3
           inputs:
             SonarCloud: ${{ parameters.sonarQubeConnection }}
             scannerMode: 'dotnet'
             dotnetScannerVersion: '10.1.2.114627'
             projectKey: ${{ parameters.sonarProjectKey }}
             projectName: ${{ parameters.sonarProjectName }}
             organization: ${{ parameters.sonarOrganization }}

         - script: |
             cd $(Build.SourcesDirectory)
             dotnet build InfiniteGuide_Corner.sln --configuration Release
           displayName: 'Dotnet Build (for SonarCloud analysis)'
         - task: SonarCloudAnalyze@3
           displayName: 'Run SonarCloud Analysis'
         - task: SonarCloudPublish@3
           inputs:
             pollingTimeoutSec: '300'
           displayName: 'Publish SonarCloud Analysis Results'

  - stage: DockerPush
    displayName: 'Push Docker Image to ACR'
    dependsOn: Sonarcloudanalysis
    jobs:
      - job: PushingToACR
        pool:
          name: Self-Hosted
          demands:
            - Agent.Name -equals localhost
        steps:
          - script: |
              echo "Building Docker image from Dockerfile..."
              docker build -t myimage:latest .
            displayName: 'Build Docker Image'
          - task: AzureCLI@2
            displayName: 'Login to ACR and Push Docker Image'
            inputs:
              azureSubscription: 'acrsc'  # Replace with your actual service connection name
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Logging into Azure Container Registry..."
                az acr login --name ${{parameters.acrName}}
                LOCAL_IMAGE_NAME=myimage:latest
                ACR_IMAGE_NAME=${{parameters.acrName}}.azurecr.io/myimage:latest
                echo "Tagging the local image with ACR repo..."
                docker tag $LOCAL_IMAGE_NAME $ACR_IMAGE_NAME
                echo "Pushing image to ACR..."
                docker push $ACR_IMAGE_NAME