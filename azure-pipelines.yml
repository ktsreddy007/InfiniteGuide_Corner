# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
# Stage 1: Check and Install Dependencies (if needed)
- stage: DotNetSetup
  displayName: 'Check and Install Dependencies for .NET on CentOS'
  jobs:
  - job: DependencyCheck
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
    steps:
    - script: |
        echo "Checking for .NET SDK..."
        if ! command -v dotnet &> /dev/null; then
          echo ".NET SDK not found. Installing..."
          echo "$sudo_user" | sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
          echo "$sudo_user" | sudo yum install -y dotnet-sdk-8.0
        else
          echo ".NET SDK already installed."
        fi

        echo "Verifying installation..."
        dotnet --info
      displayName: 'Ensure .NET SDK is Installed'

# Stage 2: Restore Dependencies
- stage: Restore
  displayName: 'Restore Dependencies'
  dependsOn: DotNetSetup
  jobs:
  - job: RestoreJob
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
    steps:
    - script: dotnet restore InfiniteGuide_Corner.sln
      displayName: 'Dotnet Restore'

# Stage 3: Build and Compile
- stage: Build
  displayName: 'Build and Compile'
  dependsOn: Restore
  jobs:
  - job: BuildJob
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
    steps:
    - script: |
        dotnet clean InfiniteGuide_Corner.sln
        dotnet build InfiniteGuide_Corner.sln --configuration Release
      displayName: 'Dotnet Clean and Build'     
# Stage 4: Publish
- stage: Publish
  displayName: 'Publish Application'
  dependsOn: Build
  jobs:
  - job: PublishJob
    pool:
        name: Self-Hosted
        demands:
          - Agent.Name -equals localhost
        steps:
          - script: dotnet publish InfiniteGuide_Corner.sln -c Release -o publish/
            displayName: 'Dotnet Publish'     
# Stage 5: Upload artifacts to JFrog
- stage: UploadToJFrog
  displayName: 'Upload Artifacts to JFrog'
  dependsOn: Publish
  jobs:
  - job: JFrogUploadJob
    pool:
      name: Self-Hosted
      demands:
        - Agent.Name -equals localhost
  variables:
      ARTIFACTORY_URL: 'http://192.168.56.1:8082'
      ARTIFACTORY_USERNAME: $(artifactoryUser)
      ARTIFACTORY_PASSWORD: $(artifactorypwd)
      script: |
        curl -fL https://getcli.jfrog.io | sh
        chmod +x jfrog
        ./jfrog rt config --url $(ARTIFACTORY_URL) --user $(ARTIFACTORY_USERNAME) --password $(ARTIFACTORY_PASSWORD) jfrog-config
        ./jfrog rt upload "publish/*" infiguide-generic-local/my-app/$(Build.BuildId)
      displayName: 'Upload artifacts to JFrog'                   